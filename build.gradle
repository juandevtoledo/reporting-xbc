buildscript {
    ext {
        set('springBootVersion','2.3.3.RELEASE')
        set('jacocoVersion','0.8.4')
        set('jfrogUser',System.getenv('JFROG_USER'))
        set('jfrogPassword',System.getenv('JFROG_PASSWORD'))
        set('jfrogContextUrl',System.getenv('JFROG_CONTEXT_URL'))
        set('springCloudVersion', "Hoxton.SR8")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://piso19.jfrog.io/piso19/libs-release"
            credentials {
                username = "$jfrogUser"
                password = "$jfrogPassword"
            }
        }
        maven {
            url "https://piso19.jfrog.io/piso19/libs-snapshot"
            credentials {
                username = "$jfrogUser"
                password = "$jfrogPassword"
            }
        }
    }

    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

plugins {
    id 'com.github.spotbugs' version '4.5.0'
    id 'info.solidsoft.pitest' version '1.5.1'
}

apply plugin: "org.sonarqube"
apply from: "$rootDir/gradle/all.gradle"
apply from: "$rootDir/gradle/release.gradle"

release {
    tagTemplate = '$name-$version'
    failOnCommitNeeded = false
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[ci skip] [CircleCI] '
    preTagCommitMessage = 'release '
    tagCommitMessage = 'release '
    newVersionCommitMessage = 'release '
    buildTasks = ['build', 'releaseBuild', 'publishCurrent']
}

task releaseBuild {
    dependsOn(
            'reporting-xbc-domain:build',
            'reporting-xbc-infra:build'
    )
}

task publishCurrent {
    dependsOn('artifactoryPublish')
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from = subprojects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from = subprojects.sourceSets.main.output
    executionData.from = subprojects.jacocoTestReport.executionData
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData.from = executionData.findAll {
            it.exists()
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/newrelic/**')
        }))
    }
}

def allTestCoverageFile = "${rootProject.buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://piso19.jfrog.io/piso19/libs-release"
            credentials {
                username = "$jfrogUser"
                password = "$jfrogPassword"
            }
        }
        maven {
            url "https://piso19.jfrog.io/piso19/libs-snapshot"
            credentials {
                username = "$jfrogUser"
                password = "$jfrogPassword"
            }
        }
    }

    dependencies {
        testCompile "org.jacoco:org.jacoco.core:$jacocoVersion"
        testCompile "org.mockito:mockito-core:3.6.0"
        testImplementation 'org.mockito:mockito-inline:3.6.0'
        testImplementation "org.mockito:mockito-core:3.6.0"
        implementation('net.minidev:json-smart:2.3'){
            transitive = false
        }
        implementation 'net.minidev:json-smart:2.4.2'
    }

    sonarqube {
        properties {
            property 'sonar.exclusions',
                    "**/com/lulobank/reporting/config/**, " +
                            "**/com/lulobank/reporting/adapter/out/s3/config/**"
            property "sonar.coverage.jacoco.xmlReportPaths", allTestCoverageFile
        }
    }
}
project.tasks["sonarqube"].dependsOn "jacocoRootReport"
